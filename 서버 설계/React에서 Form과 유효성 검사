React에서 Form을 만들때, 물론 직접 다 구현해도 되지만,
Email이 유효한지, 아니면 비밀번호가 유효한지(Regular Expression), 비밀번호 확인이 비밀번호와 같은지 등
Form의 Submit을 하기 "전에" 유효성 검사를 해야할 필요가 있다.

이를 쉽게 해주는게 Formik과 Yup이다.

우선 Yup은 데이터의 유효성 검사 조건을 쉽게 설정하고, 조건에 안맞을 경우에 띄울 에러 메시지를 편하게 설정할 수 있게 해주는 라이브러리이다.

const validationSchema = Yup.object({
        email: Yup.string().email('이메일 형식이 ㅇㄴㅁㄹㅇㄴㄻㄴㅇ').required('Required'),
        password: Yup.string().min(6, 'Password is too short - should be 6 chars minimum.')
                    .matches(/^[a-zA-Z0-9]+$/, 'Password can only contain Latin letters.').required('Required'),
        isEmailSearching: Yup.boolean().test('fdas', '중복 확인 중...', () => !formik.values.isEmailSearching),
})

이런식으로 validationSchema를 만들 수 있다.
.email()를 사용하면 이 string이 email인지 아닌지를 검사한다.(직접 구현하지 않아도 됨)
password에서도 .matches()에 Regular Expression을 적으면 match여부를 판단해서 검사한다.
isEmailSearching에서 처럼 customized된 검사도 .test()를 이용하면 직접 만들 수 있다.
.test()는 첫번째 인자로 테스트 이름, 두번째 인자로 에러 메시지, 세번째 인자로 검사함수를 받는다.
여기서 세번째 인자인 검사함수는 return값이 True면 검사를 통과한 거고, False면 설정한 에러메시지가 Formik에 전달된다.


Formik은 Yup으로 만들어진(혹은 굳이 꼭 Yup을 이용하지 않더라도 만들어진) validationSchema를 받아서
Formik이 들고 있는 value들에 대해서 각 검사를 실제로 수행하는 라이브러리이다.

const formik = useFormik({
        initialValues: {
            email: "",
            password: "",
            isEmailSearching: false,
        },
        onSubmit: (values) => {
            console.log(values);
        },
        validationSchema
    })

이것처럼 validationSchema를 useFormik안에 넣는 것만으로 어떤 유효성검사를 할지 설정해줄 수 있고,
언제든지 formik.values.[변수 이름] 으로 해당 값에 접근할 수 있으며,
formik.errors.[변수 이름] 으로 유효성 검사가 실패했을때의 메시지에도 접근할 수 있다.

formik.touched.[변수 이름]은 사용자가 한번이라도 해당 text box에 접근했는지(클릭했는지) 여부를 담고 있다.

<Form.Control
    name="email"
    {...formik.getFieldProps('email')}
    onChange={(e) => {formik.handleChange(e); formik.values.isEmailFound = (false); formik.values.isEmailChecked = (false);}}
    isValid={formik.touched.email && !(formik.errors.email || formik.errors.isEmailChecked || formik.errors.isEmailFound)}
    isInvalid={formik.touched.email && (formik.errors.email || formik.errors.isEmailChecked || formik.errors.isEmailFound)}
    placeholder={"example@gmail.com"}
/>

이 코드처럼 React-bootstrap으로 만든 Form.Control 안에도
{...formik.getFieldProps('email')}를 써주면 formik이 가지고 있는 field props(ex. onChange, onBlur 등)을 연결시켜줄 수 있다.
이렇게 연결하면 해당 Form의 text box가 변경될때마다(즉, onChange마다) validationSchema에 의한 유효성 검사가 이루어진다.

내가 특정한 시점에 유효성 검사를 하게 하고 싶으면,
formik.validateForm() 혹은 formik.validateField([변수 이름])을 하면 된다.



추후에 정확히알아보고 추가할 내용:
formik 설정할때 어떤 JSX 객체? 에 name, 혹은 없다면 id에 변수 이름을 지정해줘야하는 것으로 알고 있었는데 정확히는 지금은 모르겠음.
