기본적으로 서버의 구조는

Client(Desktop Application or Web Browser) - API Server - Database 처럼 되어야 한다.

그 말은 즉, Client가 DB에 직접 접속하게 하면 안된다는 뜻이다.

Client가 DB에 직접 접속하게 한다는 뜻은, 클라이언트가 사용하는 배포된 코드에

DB에 접속할 수 있는 하드코딩된 정보(ex. DB서버의 IP주소, DB에 로그인하기 위한 ID/PW 정보 등)가 다 들어간다는 뜻인데,

그러면 누구나 우리 DB서버의 정보를 알 수 있도록 뿌린다는 뜻이다.

이러면 우리의 DB서버는 너무 취약해진다.

이걸 막기 위해서 중간에 API Server를 두어서, Client는 API Server에 query를 날리고, API Server는 DB에 대신 접근하여 정보를 가져와서 반환해주어야 한다.

이러면 API Server에 요청하기 위해 필요한 정보(only API Server의 IP)만 Client 코드에 들어가게 된다.

--

API Server의 IP가 털리는데 그건 괜찮느냐, 결국 서버가 공격받나 DB가 공격받나 똑같은거 아닌가 라고 생각할 수 있지만,

서버는 공격 받더라도 DB는 안전하게 살아있게 되며, 서버는 언제든 복구할 수 있다. DB에 과부하를 주지 않고 서버가 과부하를 대신 받으면 된다.

DB는 민감한 개인정보 등을 다 포함하고 있기 때문에 아무에게나 접근가능하게 하면 안되지만,

API Server는, query를 요청한 사람이 누구인지 등을 토큰 혹은 세션/쿠키 방식 등을 통해서 검증을 하고(Authentication?) 정보를 반환하면 되기 때문에 안전하다.

그리고 추가로, DB는 IP주소 그대로를 사용하여 접근하지만, API Server는 DNS를 사용해서 도메인 이름으로 접근하고 쿼리를 날릴 수 있게 할 수 있기 때문에,

IP주소가 바뀌더라도 여전히 같은 도메인 이름으로 접근할 수 있어서 더 좋다.

--

DB는 연예인이고, API Server는 회사에 소속된 매니저 라고 생각하면 된다. Client는 연예인의 팬이 될 수도 있고, 악성 안티팬이 될 수도 있다.

연예인에게 팬레터를 전달하는 Client가 엄청 많을때, 연예인이 직접 모든 정보를 다 읽어보고 답장을 써주는 게 아니라

매니저가 1차적으로 검수를 하고 안전하다고 생각되는 팬레터만 연예인에게 따로 전달하면 된다.

혹, 매니저가 과로로 뻗더라도 매니저를 바꾸거나 하면 된다.

-------------------------

그러면 이제 문제는 어떻게 안전하게 Client와 Server가 통신하느냐 이다.

아무런 보안 없이 그냥 HTTP 프로토콜로 PlainText가 오고가게 되면, 중간에 해커가 가로채갈 가능성이 있다.

Client가 Server에 요청하는 쿼리가 가로채졌다고 하면, 로그인 정보(ID/PW)나, 어떤 쿼리를 사용해서 API Server에 접근하는지 등을 가로채는 거기 때문에

API server는 아무것도 모르고 정상적인 Client인줄알고 데이터를 반환해주게 된다.

Server가 Client에게 답변하는 내용을 가로챘다고 해도 보안상의 문제가 있다.

그래서 HTTP가 아니라 HTTPS를 사용해야 한다. 과거에는 SSL, 지금은 TSL을 사용하여 더 Secure한 Protocol이다.

HTTPS의 작동 원리에 대해서는 다른 글에서 자세하게 다루기로 하고, HTTPS를 사용하면 자체적으로 Encryption과 Decryption이 일어나고, 해커에게 데이터를 탈취당할 염려가 없다.

이렇게 되면 Secure of Communication은 보장된다.

(이와 별개로, 사용자의 Password같은 정보는 복호화될 필요가 없으므로 Hashing을 사용하여 hash value인 채로 DB에 저장되게 해야한다.

HTTPS를 사용할 때, Client가 서버에 PW를 보내기 전에 Hash해서 보내도 되고, 아니면 API Server가 정보를 받은 다음에 Hash를 해서 DB에 쓰게 해도 된다.

DB에서 제공하는 hash함수만 사용하지 않으면 된다. DB에서 제공하는 hash함수를 사용하면 SQL query문이 INSERT INTO ??table VALUES hash('PlainPW') 식으로 들어가기때문에

DB 로그에 다 찍힌다고 함)

-------------------------

이제 HTTPS를 사용해서, 네트워킹 과정에서 정보를 털리는 일은 없다고 생각할 수 있고,

남은 건 secure of account and website content이다. 그러니까, 정상적인 사용자라고 하더라도 DB에 있는 내용을 전부다 보여줄 게 아니라

사용자의 종류에 따라서 그 사용자가 가진 권한대로 보여줄 내용이 다 다르다.

가장 간단히 생각해볼 수 있는 것은, HTTPS 통신할 때 HEADER에다가 매번 로그인 정보를 다 담아서(ID/PW) 보내는 것이다.

(https://security.stackexchange.com/questions/124714/how-to-make-secure-communication-between-servers

에 따르면 기본적으로는 HTTPS를 사용하면 비밀번호를 날 것 그대로 보내도 안전하다고 함. 다만 더 좋은 방법들이 소개되고 있는 것 같은데 정확한 이해를 하지는 못했음.

그래도 써있기로는, Replay Attack생각하면 비밀번호를 그대로 보내는게 안좋을 수도 있지만, 서버가 완전 해킹당하는거만 아니면 괜찮다고 한다.)

그리고 사람들이 보통 사용하는 방식은 세션/쿠키 방식과 토큰 방식이 있다. (지금 정확히 몰라서 추후에 추가해야할 듯)

https://velog.io/@sim0297/%EC%84%9C%EB%B2%84-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EB%B2%951HTTPSessionCookieJWT


--------------------------------

[웹 서비스를 위한 구조 설계]

우리의 웹 서비스를 위한 시스템 설계는 다음과 같이 이루어졌다.

Client          - Apache2(Web Server)    - WAS(Web Application Server)     - Database
{Google Chrome} - {React}                 {WSGI Server + Web Application}  - {Mysql}

1. 일반적으로 웹 서비스(혹은 웹 페이지)를 만들 때의 구조는 아래와 같다.

클라이언트 - 웹 서버 - WAS - DB

웹 서버는 Nginx, Apache 등이 있고, 정적인 컨텐츠(html 코드, 이미지 파일 등)를 클라이언트에게 제공한다.
동적인 컨텐츠는 웹 서버만으로는 제공할 수 없다.

2. 
CGI: Common Gateway Interface.
과거에는 웹 서버는 동적 컨텐츠를 클라이언트에게 제공해줄 수 없으므로, CGI라는 인터페이스를 통해서 외부 프로그램(웹 애플리케이션)을 직접 실행해야했다.
그러나 요즘에는 웹 서버 자체에 인터프리터를 내장시키고 프로세스를 fork하여 외부 프로그램 실행 대신 내부에서 처리한다.

3.
Web Server + CGI = WAS
동적으로도 작동하는 웹 서버가 WAS이다. Tomcat, WebLogic, WebSphere, Jeus, JBoss 등이 있다.
아파치를 기준으로 설명하면
클라이언트가 동적 컨텐츠를 요청하면 Apache HTTP Server(httpd, 즉 아파치 웹 서버)가 그 요청을 받아서 Apache Tomcat(WAS)에게 전달하고,
WAS는 외부 프로그램(Web Application)을 실행한다.

이렇게 설명하면, 1번에서 웹 서버와 WAS를 구별해서 적어두었고, 3번에서는 WAS가 Web Server를 포함하는 것으로 적었기 때문에 헷갈릴 수 있다.
물론 WAS가 동적인 컨텐츠를 제공하기 위해서 사용되는만큼, 당연히 정적인 컨텐츠도 클라이언트에게 반환할수있다.
하지만 https://doozi316.github.io/web/2020/09/13/WEB26/ 에 따르면 그럼에도 불구하고 웹 서버가 정적인 컨텐츠를,
WAS가 동적인 컨텐츠 만을 반환하게 해서 일을 분배해야 효율적이라고 한다.

※CGI, 어플리케이션 서버 방식의 차이
접속자가 많은 서비스의 경우 CGI 방식보다 어플리케이션 서버 방식의 Throughput(처리량)이 더 좋습니다.
예를들어, 5개의 웹 브라우저가 동일한 프로그램을 요청했을 때 CGI 방식은 5개의 요청에 대한 프로그램을 모두 메모리에 적재합니다.
반면, 어플리케이션 서버방식은 메모리에 한번만 적재합니다. 이로써 CGI방식에 비해 전체적인 메모리 사용량이 적습니다. 이는 더 많은 요청을 처리할 수 있음을 의미합니다.
출처: https://brownbears.tistory.com/350

4.
Python으로 웹 애플리케이션을 구현한 경우에 우선 당연히 웹 서버(apache)와 웹 애플리케이션(flask)는 서로 요청을 직접 주고받을 수 없다. (프로토콜이 없기 때문)
그리고 앞서 언급한 WAS(Web server + CGI, ex. Tomcat 등)도 해당 애플리케이션을 구동하지 못한다. 그래서 Python 한정으로, 
WSGI(Web Server Gateway Interface)라는 다른 인터페이스를 사용한다. 그리고 WSGI Server는 WSGI 인터페이스를 웹 서버와 웹 애플리케이션이 서로 소통할 수 있도록
사이에서 서버 역할을 한다.(ex. gunicorn, apache의 mod_wsgi 등) 즉, Python으로 웹 애플리케이션을 짠 경우에는 WAS가 WSGI Server + Web Application으로 구성된다.

클라이언트가 웹 서버에게 어떤 페이지를 요청하면, 웹 서버는 그 페이지를 만들기 위해 필요한 컨텐츠들 중에서 정적인 컨텐츠는 자기가 직접 응답하고
동적인 컨텐츠는 WSGI Server에게 요청하게 된다.
WSGI Server는 Python으로 구현된 웹 애플리케이션(당연히 이 애플리케이션도 WSGI 인터페이스를 제공해야함.
Flask, Django는 WSGI 인터페이스를 제공함)을 직접 실행시켜서 얻은 결과를 다시 클라이언트에게 전달한다.

5.
그렇다면 왜 클라이언트가 동적인 컨텐츠를 요청하기 위해서 직접 WSGI Server에 요청하지 않고, 웹 서버에 대신 요청해야할까?
-> WSGI 서버로 mod_wsgi를 쓰는 경우와 gunicorn을 쓰는 경우로 나누어서 설명한다.
a. mod_wsgi를 쓰는 경우.
apache web server(httpd)를 사용하고, WSGI가 굳이 다른 서버 컴퓨터 환경에서 돌아갈 필요가 없을 때이다.
아파치가 mod_wsgi라는 WSGI Server를 직접 실행해서, mod_wsgi가 web application을 실행하게 한다.
(사실 이 경우에는 클라이언트가 직접 WSGI 서버에 요청하는 방법은 아직 모르겠다. 어쨌든,)
이러면 아파치 웹서버와 mod_wsgi는 같은 컴퓨터 환경 내에서 돌아가기 때문에 HTTP같은 통신이 필요하지 않는다.
apache configuration 설정에서 WSGI Alias를 /api --> /{some_paths}/wsgi.wsgi (이 wsgi파일은 flask web application과 연동되어있음)로 돌려줄 수 있는데, 이러면 
클라이언트가 아파치 웹서버에 동적 컨텐츠 요청할때 illerbachgi.com:80/api/get_samples 요청을
wsgi server로 돌려주고, wsgi server가 flask application을 실행한다. flask가 응답하면 wsgi서버가 받아서 클라이언트에게 전달한다.
(아직 잘 모르겠는점: flask의 응답을 wsgi서버가 받았을때, apache web server에 다시 전달하고, 웹 서버가 클라이언트에게 주는가? 아니면
wsgi서버가 바로 클라이언트에게 주는가?)

b. gunicorn을 쓰는 경우.
gunicorn은 apache web server가 실행하는게 아니라 독자적인 서버처럼 포트를 열고 돌아간다.
그래서 클라이언트는 동적 컨텐츠가 필요할때 gunicorn의 포트에 접근해서 요청을 날릴 수 있다.
하지만 이러면, web server로부터 80번포트를 통해 받아오던 다른 정적 컨텐츠와 달리, 포트 번호가 다른 낯선 출처로부터 컨텐츠를 받아왔다고
웹 브라우저가 판단하기 때문에 CORS policy를 위반했다며 에러가 나게 된다.
그래서 ProxyPass, ProxyPassReverse를 apache config파일에 설정해서 /api/~~로 들어오는 요청을 :{gunicorn_port}/~~로 돌려야 한다.



[ 실습 ]

1. sudo apt-get install libapache2-mod-wsgi-py3 로 mod_wsgi 설치. py3를 뒤에 꼭 붙여줘야 python2버전으로 안깔고 python3 버전으로 깐다.

2. /var/www/ 안의 어딘가에(이번에는 DocumentRoot가 /var/www/illerbachgi/build여서 /var/www/illerbachgi/was 경로로 정했음.
원래는 완전 아무데나 다 되는줄 알았는데 /home/begongyal/ 아래에서는 실패했음. 왜인지는 모르겠음. 아마도 권한 문제)
app.py(flask로 만든 web application), wsgi.wsgi(그냥 확장자가 wsgi면 됨)의 두 파일을 만든다.

3. app.py는 

from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "hello"
    
이런식으로 구성하면 된다. 중요한건
if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)
이 코드가 필요가 없다. 왜냐하면 이건 development용으로 flask 자체 서버로 돌리는 것이다. 그런데 우리는 WSGI서버로 돌릴 것이기 때문에 필요없다.


4. wsgi.wsgi는

import sys
sys.path.insert(0, "/var/www/illerbachgi/was")
from app import app as application

이렇게 구성하면 된다. 
from app에서의 app은 app.py의 이름인 app이고
import app의 app은 app = Flask(__name__)의 app이다.
as application은 고정이라고 생각하면 된다. 
참고: 이것은 컨벤션임. 이름을 application으로 안하고 다른걸로 해도 되지만,
그러면 귀찮게 설정해줘야되는 것이 많으니까 그렇게 안하는게 좋다고 공식 문서에서 그랬음.

Note that mod_wsgi requires that the WSGI application entry point be called ‘application’.
If you want to call it something else then you would need to configure mod_wsgi explicitly to use the other name.
Thus, don’t go arbitrarily changing the name of the function.
If you do, even if you set up everything else correctly the application will not be found.
출처: https://modwsgi.readthedocs.io/en/develop/user-guides/quick-configuration-guide.html


5. 이제 app.py, wsgi.wsgi가 준비되었으므로 /etc/apache2/sites-available에 있는 현재 사용중인 conf파일을 수정하면 된다.

우리는 /etc/apache2/sites-available/default-ssl.conf를 수정하여 다음과 같은 코드들을 새로 추가했다.

WSGIScriptAlias /api /var/www/illerbachgi/was/wsgi.wsgi
==> Alias설정. illerbachgi.com/api/~로 들어온 요청을 flask web application을 실행할 수 있는 WSGI서버에게 넘겨준다.
==> 중요한점. Alias할때 "/api/"로 쓰면 안됨. "/api"로 써야함

WSGIDaemonProcess app threads=3
==> 안해도 되지만, 최대 thread를 3개로 고정시키기 위해서(CPU Bound) 설정해준다.
자세한내용은 출처:https://modwsgi.readthedocs.io/en/develop/configuration-directives/WSGIDaemonProcess.html

공식 Quick Configuration Guide를 통한, 여러가지 세팅들에 대한 출처: https://modwsgi.readthedocs.io/en/develop/user-guides/quick-configuration-guide.html
