어떤 웹 서비스를 제공할때, 클라이언트가 누구인지에 따라서 서버가 제공해야할 정보가 다르다면,
사용자 인증(Authentication)은 필수적이다.

사용자 인증을 구현하는 방법은 아래의 여러가지가 있다.

1. 로그인 시에 사용자가 입력한 아이디, 패스워드를 클라이언트 side에 local하게 저장해두고
매 요청시마다 서버에 요청 정보와 함께 보내는 것
장점: 구현이 편하다(서버가 stateless하다. 왜냐하면 매번 요청을 읽어들여서 아이디와 패스워드를 DB와 비교하고 등록된 사용자인 경우에 요청에 대한 응답을 하면 되니까.)
단점: 보안에 취약하다.(매번 DB에 접근해서 ID, PW를 비교하는 것도 일이고, 보안적으로도 클라이언트에 항상 아이디 패스워드를 저장하고 있기 때문에
+ 매번 요청시마다 네트워크를 통해서 ID, PW가 이동하기 때문에 attack surface가 넓어진다.)

2. 토큰 기반 사용자 인증(ex. JWT)
사용자가 처음 로그인할 때만 ID, PW를 서버로 보낸다. 서버는 이를 확인하고, 클라이언트에게 고유한 토큰을 발급하고, 클라이언트에게 전송한다.
클라이언트는 이제부터 매 요청시마다 토큰을 같이 보낸다.(청암에 들어가기 위한 학생증)
그러면 서버는 매번 ID, PW를 비교할 필요 없이, 토큰이 유효한지만 확인하면 된다.

특징: Stateless하다. 리스트 룩업을 하지 않고, 컴퓨팅 파워에 속도가 의존적이다.(예를 들면 사용자가 엄청 많은 수가 있지만 요청 자체는 거의 적다면 유리)

장점: 매번 DB를 확인하지 않아도 그 토큰이 유효한 토큰인지만 확인하면 되기 때문에, 안전하다.

단점: 클라이언트의 토큰이 누군가에게 탈취당해서 악의적인 요청에 같이 첨부될 경우, 서버 입장에서는 막을 방법이 없다.
그리고 사용자는 적은데 요청 횟수 자체가 많다면 매 요청시마다 토큰의 유효성을 검사하기 위해서 컴퓨팅 파워를 사용하는 것보다, 
얼마 안되는 사용자 리스트(세션)를 검사하는 것이 더 좋을 수 있다.(storage의 속도에 bound)
그리고 암호화를 하지 않은 토큰이라면(JWT같이 암호화를 안한다면) 무단으로 위/변조 될 가능성이 있다.

3. Server-side session 기반 사용자 인증
def. 세션: 클라이언트와 서버 간의 연결(추상적 개념)
사용자가 처음 로그인할 때만 ID, PW를 서버로 보낸다. 서버가 이를 확인하면, 세션이라고 하는 가상의 개념
ㅡDB, 혹은 메모리에 table 형태로 저장(redis사용시)된다고 생각하면 된다ㅡ을 만든다.
여기에서 세션은 사용자가 이미 정상적인 방법으로 로그인이 되었던 적이 있다는 사실을 기록하기 위해 필요한 정보들을 담고 있다.
(ex. 세션ID, 세션 만료날짜, 그 전에 어떤 요청들을 했었는지 등 자유롭게 저장 가능)
따라서 server-side session 기반 사용자 인증은 stateful하다.
그리고 서버는 로그인에 대한 응답으로, 토큰 기반에서 그랬던 것과 유사하게, 세션ID를 클라이언트에게 제공한다.
클라이언트는 제공받은 세션 ID를 웹 브라우저의 쿠키로 저장한다.
이제부터 모든 요청시마다 클라이언트는 세션ID를 요청에 첨부한다.
참고: Redis는 In-memory DB임.

장점: 보안이 좋다. 우선 클라이언트가 저장하는 건 오직 세션ID이고, 세션ID는 특별히 감춰야할 정보가 아니다. 중요한 정보들은, 서버가 전부 가지고 있다.
클라이언트가 쿠키에 저장해야되는 정보 자체가 적어서 클라이언트에 부담이 없다.
그리고 "이론적으로는" 혹시나 토큰 방식에서처럼 세션이 누군가에게 탈취당하더라도, stateful하다는 특성 때문에 해당 세션만 만료시킬 수 있다.

단점: 서버가 부담을 진다.(모든 세션 정보를 다 가지고 있어야 하기 때문에)

4. Client-side session 기반 사용자 인증
flask의 경우에 기본적으로 제공하는 session이라는 라이브러리가 client-side session이라고 해서 많이 헷갈렸다.
그런데 그냥 signed cookie, 즉 암호화된 토큰이랑 다를바가 없다.
client-side session이기 때문에, 서버 대신에 각 자신의 session 정보를 각각의 클라이언트들이 들고 있다.
그러니까, 위에서 언급한 토큰이든, client-side session이든 둘다 클라이언트의 웹 브라우저 안에 쿠키로 정보를 저장해서
매 요청시마다 끼워서 요청한다면 이건 그냥 토큰 기반 로그인이라고 보면 된다.
